#!/bin/sh

export INTERFACE=${PROBE_INTERFACE:-"lo"}
export ARGS=${PROBE_SRC:-"127.0.0.1"}
export COLOR=${PROBE_COLOR:-1}
export ROOT=${PROBE_ROOT:-1}
export RAINBOW=${PROBE_RAINBOW:-1}
export FLAG=${PROBE_FLAG:-'rainbow'}
export FLAG_BG=${PROBE_FLAG_BG:-0}
export FLAG_BGNAME=${PROBE_FLAG_BGNAME:-'rainbow'}
export FLAG_VERTICAL=${PROBE_FLAG_VERTICAL:-0}

if [ "$(echo $ROOT)" == "1" ] && ! [ "$(whoami)" == "root" ]; then
	echo "Command must be executed by a root user!"
	exit 1
fi

if ! command -v tcpdump &>/dev/null; then
	echo "Missing tcpdump program. Please install it."
	exit 2
fi

SCRIPT_TYPE=$(basename "$0" | rev | cut -f 1 -d "-" | rev)

if [ "$INTERFACE" == "lo" ] && ! [ -n "$PROBE_INTERFACE" ]; then
	INTERFACE=$(ip -o link show | awk '{if (NR>1 && $3 != "lo:") print $2}' | cut -f 1 -d ":" | head -n 1)
	if [ "$INTERFACE" == "" ]; then
		INTERFACE="lo"
	fi
fi

if [ "$ARGS" == "127.0.0.1" ] && ! [ -n "$PROBE_SRC" ]; then
	ARGS="$(hostname)"
	if [ "$ARGS" == "" ]; then
		ARGS="127.0.0.1"
	fi
fi

export color_schemes=("rainbow" "trans" "queer" "enby" "pansexual" "polysexual" "aroace" "asexual" "aromantic" "agender" "lesbian" "bisexual" "genderfluid" "white" "cyan" "green" "red" "yellow" "black")

if [ -n "$1" ]; then
	case "$1" in
		"colors")
			echo "Available color schemes:"
			for element in "${color_schemes[@]}"; do
				echo '	- '"${element}"
			done
			exit 0
			;;
		"log")
			if ! [ -n "$2" ]; then
				echo "Missing log ID."
				exit 404
			fi
			work_path="$HOME/.cache/xaviama/tcp-probe"
			if [ -d "$work_path" ]; then
				if ! [ -f "$work_path/probe-tcp-${SCRIPT_TYPE}-log-$2" ]; then
					echo "Log ID not found."
					exit 404
				fi
				cat "$work_path/probe-tcp-${SCRIPT_TYPE}-log-$2"
				exit 0
			elif [ -d "/tmp" ]; then
				if ! [ -f "/tmp/probe-tcp-${SCRIPT_TYPE}-log-$2" ]; then
					echo "Log ID not found."
					exit 404
				fi
				cat "/tmp/probe-tcp-${SCRIPT_TYPE}-log-$2"
				exit 0
			else
				echo "Based paths not found..."
				exit 404
			fi
			;;
		"rmlog")
			if ! [ -n "$2" ]; then
				echo "Missing log ID."
				exit 404
			fi
			work_path="$HOME/.cache/xaviama/tcp-probe"
			if [ -d "$work_path" ]; then
				if ! [ -f "$work_path/probe-tcp-${SCRIPT_TYPE}-log-$2" ]; then
					echo "Log ID not found."
					exit 404
				fi
				rm -f "$work_path/probe-tcp-${SCRIPT_TYPE}-log-$2"
				exit 0
			elif [ -d "/tmp" ]; then
				if ! [ -f "/tmp/probe-tcp-${SCRIPT_TYPE}-log-$2" ]; then
					echo "Log ID not found."
					exit 404
				fi
				rm -f "/tmp/probe-tcp-${SCRIPT_TYPE}-log-$2"
				exit 0
			else
				echo "Based paths not found..."
				exit 404
			fi
			;;
		"rmlogs")
			work_path="$HOME/.cache/xaviama/tcp-probe"
			if [ -d "$work_path" ]; then
				for element in $(find "$work_path" -type f -name '*'"${SCRIPT_TYPE}"'-log*'); do
					rm -f "$element"
				done
				exit 0
			fi
			if [ -d "/tmp" ]; then
				for element in $(find "/tmp" -type f -name '*'"${SCRIPT_TYPE}"'-log*'); do
					rm -f "$element"
				done
				exit 0
			fi
			;;
		"help")
			echo "Help output of probe-${SCRIPT_TYPE}:"
			echo '	Environment variables:'
			echo '	- `PROBE_COLOR=0/1 | default 1` - set colors for a console'
			echo '	- `PROBE_SRC=<string> | default 127.0.0.1` - set source destination (for `probe-out`)'
			echo '	- `PROBE_DST=<string> | default 127.0.0.1` - set destination (for `probe-in`)'
			echo '	- `PROBE_INTERFACE=<string> | default eth3` - set interface on which `tcpdump` should listen on'
			echo '	- `PROBE_ROOT=0/1 | default 1` - check if running as root'
			echo '	- `PROBE_RAINBOW=0/1 | default 1` - enable rainbow texts'
			echo '	- `PROBE_FLAG=<string> | default rainbow` - set color scheme (list available schemes under `colors` command)'
			echo '	- `PROBE_FLAG_BG=0/1 | default 0` - render flag in background too'
			echo '	- `PROBE_FLAG_BGNAME=<string> | default rainbow` - set name for background flag'
			echo '	- `PROBE_FLAG_VERTICAL=0/1 | default 1` - render flag vertically'
			echo ""
			echo '	Commands:'
			echo '	- `log <ID>` - show log file from ID'
			echo '	- `rmlog <ID>` - remove specific log'
			echo '	- `rmlogs` - remove all logs'
			echo '	- `help` - show help output'
			echo '	- `colors` - show available color schemes'
			echo ""
			echo 'Â© 2023 Chimmie Firefly | Akini License 3.1'
			exit 0
			;;
		*)
			echo "Unknown command!"
			echo "	Type \`$(realpath $0) help\` for help."
			exit 404
			;;
	esac
fi

export time_boot="$(date +%s)"

if [ -d "$HOME" ]; then
	if ! [ -d "$HOME"/.cache/xaviama/tcp-probe ]; then
		mkdir -p "$HOME"/.cache/xaviama/tcp-probe
	fi
	for pids in $(find "$HOME/.cache/xaviama/tcp-probe" -type f -name '*'"${SCRIPT_TYPE}"'-pid*'); do
		actual_pid=$(cat "$pids")
		process_name=$(ps -p $actual_pid -o comm= | grep -oE '[^/]+$')

		if [ -n "$process_name" ]; then
			if ! [ "$process_name" == "$0" ]; then
				old_date_pid=$(echo "$pids" | rev | cut -f 1 -d "-" | rev)
				rm -f "$HOME/.cache/xaviama/tcp-probe/probe-tcp-${SCRIPT_TYPE}-pipe-$old_date_pid"
				rm -f "$pids"
			fi
		else
			old_date_pid=$(echo "$pids" | rev | cut -f 1 -d "-" | rev)
			rm -f "$HOME/.cache/xaviama/tcp-probe/probe-tcp-${SCRIPT_TYPE}-pipe-$old_date_pid"
			rm -f "$pids"
		fi
	done
	for logs in $(find "$HOME/.cache/xaviama/tcp-probe" -type f -name '*log*'); do
		date_engine=$(($(echo "$logs" | rev | cut -f 1 -d "-" | rev)))
		date_actual=$(($time_boot))
		division=0
		let "division = date_actual - date_engine"
		if [ $division -gt 86400 ]; then
			rm -f "$logs"
		fi
	done
	export shell_pid="$HOME/.cache/xaviama/tcp-probe/probe-tcp-${SCRIPT_TYPE}-pid-$time_boot"
	export pipe="$HOME/.cache/xaviama/tcp-probe/probe-tcp-${SCRIPT_TYPE}-pipe-$time_boot"
	export logging="$HOME/.cache/xaviama/tcp-probe/probe-tcp-${SCRIPT_TYPE}-log-$time_boot"
else
	export shell_pid="/tmp/probe-tcp-${SCRIPT_TYPE}-pid-$time_boot"
	export pipe="/tmp/probe-tcp-${SCRIPT_TYPE}-pipe-$time_boot"
	export logging="/tmp/probe-tcp-${SCRIPT_TYPE}-log-$time_boot"
fi

echo "$$" > "$shell_pid"
mkfifo "$pipe"
touch "$logging"

exec 3> "$logging"

clear

function clean_up() {
	kill -9 "$tcpdump_pid"
	rm -f "$pipe"
	rm -f "$shell_pid"
	echo "${BCyan}> ${BRed}Shutting down!${NC}"
}

function shutdown() {
	clean_up
	exit 0
}

trap "shutdown" SIGTERM SIGINT ERR

function load_colors() {
    if [ $COLOR == 1 ]; then
        LS_COLORS='no=00;38;5;244:rs=0:di=00;38;5;33:ln=00;38;5;37:mh=00:pi=48;5;230;38;5;136;01:so=48;5;230;38;5;136;01:do=48;5;230;38;5;136;01:bd=48;5;230;38;5;244;01:cd=48;5;230;38;5;244;01:or=48;5;235;38;5;160:su=48;5;160;38;5;230:sg=48;5;136;38;5;230:ca=30;41:tw=48;5;64;38;5;230:ow=48;5;235;38;5;33:st=48;5;33;38;5;230:ex=00;38;5;64:*.tar=00;38;5;61:*.tgz=00;38;5;61:*.arj=00;38;5;61:*.taz=00;38;5;61:*.lzh=00;38;5;61:*.lzma=00;38;5;61:*.tlz=00;38;5;61:*.txz=00;38;5;61:*.zip=00;38;5;61:*.z=00;38;5;61:*.Z=00;38;5;61:*.dz=00;38;5;61:*.gz=00;38;5;61:*.lz=00;38;5;61:*.xz=00;38;5;61:*.bz2=00;38;5;61:*.bz=00;38;5;61:*.tbz=00;38;5;61:*.tbz2=00;38;5;61:*.tz=00;38;5;61:*.deb=00;38;5;61:*.rpm=00;38;5;61:*.jar=00;38;5;61:*.rar=00;38;5;61:*.ace=00;38;5;61:*.zoo=00;38;5;61:*.cpio=00;38;5;61:*.7z=00;38;5;61:*.rz=00;38;5;61:*.apk=00;38;5;61:*.gem=00;38;5;61:*.jpg=00;38;5;136:*.JPG=00;38;5;136:*.jpeg=00;38;5;136:*.gif=00;38;5;136:*.bmp=00;38;5;136:*.pbm=00;38;5;136:*.pgm=00;38;5;136:*.ppm=00;38;5;136:*.tga=00;38;5;136:*.xbm=00;38;5;136:*.xpm=00;38;5;136:*.tif=00;38;5;136:*.tiff=00;38;5;136:*.png=00;38;5;136:*.PNG=00;38;5;136:*.svg=00;38;5;136:*.svgz=00;38;5;136:*.mng=00;38;5;136:*.pcx=00;38;5;136:*.dl=00;38;5;136:*.xcf=00;38;5;136:*.xwd=00;38;5;136:*.yuv=00;38;5;136:*.cgm=00;38;5;136:*.emf=00;38;5;136:*.eps=00;38;5;136:*.CR2=00;38;5;136:*.ico=00;38;5;136:*.tex=00;38;5;245:*.rdf=00;38;5;245:*.owl=00;38;5;245:*.n3=00;38;5;245:*.ttl=00;38;5;245:*.nt=00;38;5;245:*.torrent=00;38;5;245:*.xml=00;38;5;245:*Makefile=00;38;5;245:*Rakefile=00;38;5;245:*Dockerfile=00;38;5;245:*build.xml=00;38;5;245:*rc=00;38;5;245:*1=00;38;5;245:*.nfo=00;38;5;245:*README=00;38;5;245:*README.txt=00;38;5;245:*readme.txt=00;38;5;245:*.md=00;38;5;245:*README.markdown=00;38;5;245:*.ini=00;38;5;245:*.yml=00;38;5;245:*.cfg=00;38;5;245:*.conf=00;38;5;245:*.h=00;38;5;245:*.hpp=00;38;5;245:*.c=00;38;5;245:*.cpp=00;38;5;245:*.cxx=00;38;5;245:*.cc=00;38;5;245:*.objc=00;38;5;245:*.sqlite=00;38;5;245:*.go=00;38;5;245:*.sql=00;38;5;245:*.csv=00;38;5;245:*.log=00;38;5;240:*.bak=00;38;5;240:*.aux=00;38;5;240:*.lof=00;38;5;240:*.lol=00;38;5;240:*.lot=00;38;5;240:*.out=00;38;5;240:*.toc=00;38;5;240:*.bbl=00;38;5;240:*.blg=00;38;5;240:*~=00;38;5;240:*#=00;38;5;240:*.part=00;38;5;240:*.incomplete=00;38;5;240:*.swp=00;38;5;240:*.tmp=00;38;5;240:*.temp=00;38;5;240:*.o=00;38;5;240:*.pyc=00;38;5;240:*.class=00;38;5;240:*.cache=00;38;5;240:*.aac=00;38;5;166:*.au=00;38;5;166:*.flac=00;38;5;166:*.mid=00;38;5;166:*.midi=00;38;5;166:*.mka=00;38;5;166:*.mp3=00;38;5;166:*.mpc=00;38;5;166:*.ogg=00;38;5;166:*.opus=00;38;5;166:*.ra=00;38;5;166:*.wav=00;38;5;166:*.m4a=00;38;5;166:*.axa=00;38;5;166:*.oga=00;38;5;166:*.spx=00;38;5;166:*.xspf=00;38;5;166:*.mov=00;38;5;166:*.MOV=00;38;5;166:*.mpg=00;38;5;166:*.mpeg=00;38;5;166:*.m2v=00;38;5;166:*.mkv=00;38;5;166:*.ogm=00;38;5;166:*.mp4=00;38;5;166:*.m4v=00;38;5;166:*.mp4v=00;38;5;166:*.vob=00;38;5;166:*.qt=00;38;5;166:*.nuv=00;38;5;166:*.wmv=00;38;5;166:*.asf=00;38;5;166:*.rm=00;38;5;166:*.rmvb=00;38;5;166:*.flc=00;38;5;166:*.avi=00;38;5;166:*.fli=00;38;5;166:*.flv=00;38;5;166:*.gl=00;38;5;166:*.m2ts=00;38;5;166:*.divx=00;38;5;166:*.webm=00;38;5;166:*.axv=00;38;5;166:*.anx=00;38;5;166:*.ogv=00;38;5;166:*.ogx=00;38;5;166:'
        export LS_COLORS

        # Normal Colors
        export Black=$'\e[0;30m'        # Black
        export Red=$'\e[0;31m'          # Red
        export Green=$'\e[0;32m'        # Green
        export Yellow=$'\e[0;33m'       # Yellow
        export Blue=$'\e[0;34m'         # Blue
        export Purple=$'\e[0;35m'       # Purple
        export Cyan=$'\e[0;36m'         # Cyan
        export White=$'\e[0;37m'        # White

        # Bold
        export BBlack=$'\e[1;30m'       # Black
        export BRed=$'\e[1;31m'         # Red
        export BGreen=$'\e[1;32m'       # Green
        export BYellow=$'\e[1;33m'      # Yellow
        export BBlue=$'\e[1;34m'        # Blue
        export BPurple=$'\e[1;35m'      # Purple
        export BCyan=$'\e[1;36m'        # Cyan
        export BWhite=$'\e[1;37m'       # White

        # Background
        export On_Black=$'\e[40m'       # Black
        export On_Red=$'\e[41m'         # Red
        export On_Green=$'\e[42m'       # Green
        export On_Yellow=$'\e[43m'      # Yellow
        export On_Blue=$'\e[44m'        # Blue
        export On_Purple=$'\e[45m'      # Purple
        export On_Cyan=$'\e[46m'        # Cyan
        export On_White=$'\e[47m'       # White

        export NC=$'\e[m'               # Color Reset
    else
        unset LS_COLORS

        # Normal Colors
        unset Black        # Black
        unset Red          # Red
        unset Green        # Green
        unset Yellow       # Yellow
        unset Blue         # Blue
        unset Purple       # Purple
        unset Cyan         # Cyan
        unset White        # White

        # Bold
        unset BBlack       # Black
        unset BRed         # Red
        unset BGreen       # Green
        unset BYellow      # Yellow
        unset BBlue        # Blue
        unset BPurple      # Purple
        unset BCyan        # Cyan
        unset BWhite       # White

        # Background
        unset On_Black       # Black
        unset On_Red         # Red
        unset On_Green       # Green
        unset On_Yellow      # Yellow
        unset On_Blue        # Blue
        unset On_Purple      # Purple
        unset On_Cyan        # Cyan
        unset On_White       # White

        unset NC               # Color Reset
    fi

}

load_colors

function rgb_engine() {
	echo $'\e[38;2;'$1';'$2';'$3'm'
}


function rgb_engine_bg() {
	r=$1
	g=$2
	b=$3
	if [ $r -gt 50 ]; then
		let "r = r - 50"
	fi
	if [ $g -gt 50 ]; then
		let "g = g - 50"
	fi
	if [ $b -gt 50 ]; then
		let "b = b - 50"
	fi
	echo $'\e[48;2;'$r';'$g';'$b'm'
}

function flags_rgb() {
	if [ "$COLOR" == "1" ]; then
		export FSky="$(rgb_engine 92 206 250)"
		export FPink="$(rgb_engine 243 168 182)"
		export FWhite="$(rgb_engine 255 255 255)"
		export FCanaryYellow="$(rgb_engine 252 244 52)"
		export FLightPurple="$(rgb_engine 154 89 207)"
		export FDarkGrey="$(rgb_engine 45 43 44)"
		export FDeepPink="$(rgb_engine 214 2 112)"
		export FLightEggPlant="$(rgb_engine 154 79 150)"
		export FSapphire="$(rgb_engine 0 57 169)"
		export FRedOrange="$(rgb_engine 213 44 1)"
		export FFadedOrange="$(rgb_engine 252 153 85)"
		export FPaleMagenta="$(rgb_engine 210 97 163)"
		export FDeepMagenta="$(rgb_engine 163 2 98)"
		export FBrightPink="$(rgb_engine 247 29 186)"
		export FTeaGreen="$(rgb_engine 6 212 104)"
		export FAzure="$(rgb_engine 27 145 245)"
		export FBlack="$(rgb_engine 0 0 0)"
		export FGrey="$(rgb_engine 147 147 147)"
		export FDarkPurple="$(rgb_engine 100 0 99)"
		export FStrongPink="$(rgb_engine 253 32 138)"
		export FSunflowerYellow="$(rgb_engine 255 217 2)"
		export FWaterBlue="$(rgb_engine 33 176 254)"
		export FRed="$(rgb_engine 228 0 1)"
		export FTangerine="$(rgb_engine 254 138 1)"
		export FSunnyYellow="$(rgb_engine 252 234 0)"
		export FKelleyGreen="$(rgb_engine 0 127 36)"
		export FElectricBlue="$(rgb_engine 0 75 254)"
		export FPurple="$(rgb_engine 115 4 132)"
		export FMediumGreen="$(rgb_engine 59 163 66)"
		export FOliveGreen="$(rgb_engine 166 211 120)"
		export FSilver="$(rgb_engine 168 168 168)"
		export FDirtyOrange="$(rgb_engine 225 139 0)"
		export FSunYellow="$(rgb_engine 235 204 0)"
		export FCoolBlue="$(rgb_engine 97 174 220)"
		export FDarkSlateBlue="$(rgb_engine 31 54 85)"
		export FLightSilver="$(rgb_engine 189 194 197)"
		export FPistachio="$(rgb_engine 181 244 130)"
		export DCarnationPink="$(rgb_engine 252 115 159)"
		export FHeliotrope="$(rgb_engine 189 22 213)"
		export FWarmBlue="$(rgb_engine 50 61 187)"

		export BFSky="$(rgb_engine_bg 92 206 250)"
		export BFPink="$(rgb_engine_bg 243 168 182)"
		export BFWhite="$(rgb_engine_bg 255 255 255)"
		export BFCanaryYellow="$(rgb_engine_bg 252 244 52)"
		export BFLightPurple="$(rgb_engine_bg 154 89 207)"
		export BFDarkGrey="$(rgb_engine_bg 45 43 44)"
		export BFDeepPink="$(rgb_engine_bg 214 2 112)"
		export BFLightEggPlant="$(rgb_engine_bg 154 79 150)"
		export BFSapphire="$(rgb_engine_bg 0 57 169)"
		export BFRedOrange="$(rgb_engine_bg 213 44 1)"
		export BFFadedOrange="$(rgb_engine_bg 252 153 85)"
		export BFPaleMagenta="$(rgb_engine_bg 210 97 163)"
		export BFDeepMagenta="$(rgb_engine_bg 163 2 98)"
		export BFBrightPink="$(rgb_engine_bg 247 29 186)"
		export BFTeaGreen="$(rgb_engine_bg 6 212 104)"
		export BFAzure="$(rgb_engine_bg 27 145 245)"
		export BFBlack="$(rgb_engine_bg 0 0 0)"
		export BFGrey="$(rgb_engine_bg 147 147 147)"
		export BFDarkPurple="$(rgb_engine_bg 100 0 99)"
		export BFStrongPink="$(rgb_engine_bg 253 32 138)"
		export BFSunflowerYellow="$(rgb_engine_bg 255 217 2)"
		export BFWaterBlue="$(rgb_engine_bg 33 176 254)"
		export BFRed="$(rgb_engine_bg 228 0 1)"
		export BFTangerine="$(rgb_engine_bg 254 138 1)"
		export BFSunnyYellow="$(rgb_engine_bg 252 234 0)"
		export BFKelleyGreen="$(rgb_engine_bg 0 127 36)"
		export BFElectricBlue="$(rgb_engine_bg 0 75 254)"
		export BFPurple="$(rgb_engine_bg 115 4 132)"
		export BFMediumGreen="$(rgb_engine_bg 59 163 66)"
		export BFOliveGreen="$(rgb_engine_bg 166 211 120)"
		export BFSilver="$(rgb_engine_bg 168 168 168)"
		export BFDirtyOrange="$(rgb_engine_bg 225 139 0)"
		export BFSunYellow="$(rgb_engine_bg 235 204 0)"
		export BFCoolBlue="$(rgb_engine_bg 97 174 220)"
		export BFDarkSlateBlue="$(rgb_engine_bg 31 54 85)"
		export BFLightSilver="$(rgb_engine_bg 189 194 197)"
		export BFPistachio="$(rgb_engine_bg 181 244 130)"
		export BFCarnationPink="$(rgb_engine_bg 252 115 159)"
		export BFHeliotrope="$(rgb_engine_bg 189 22 213)"
		export BFWarmBlue="$(rgb_engine_bg 50 61 187)"
	else
		unset FCyan
		unset FPink
		unset FWhite
		unset FCanaryYellow
		unset FLightPurple
		unset FDarkGrey
		unset FDeepPink
		unset FLightEggPlant
		unset FSapphire
		unset FRedOrange
		unset FFadedOrange
		unset FPaleMagenta
		unset FDeepMagenta
		unset FBrightPink
		unset FTeaGreen
		unset FAzure
		unset FBlack
		unset FGrey
		unset FDarkPurple
		unset FStrongPink
		unset FSunflowerYellow
		unset FWaterBlue
		unset FRed
		unset FTangerine
		unset FSunnyYellow
		unset FKelleyGreen
		unset FElectricBlue
		unset FPurple
		unset FMediumGreen
		unset FOliveGreen
		unset FSilver
		unset FDirtyOrange
		unset FSunYellow
		unset FCoolBlue
		unset FDarkSlateBlue
		unset FLightSilver
		unset FPistachio
		unset DCarnationPink
		unset FHeliotrope
		unset FWarmBlue

		unset BFSky
		unset BFPink
		unset BFWhite
		unset BFCanaryYellow
		unset BFLightPurple
		unset BFDarkGrey
		unset BFDeepPink
		unset BFLightEggPlant
		unset BFSapphire
		unset BFRedOrange
		unset BFFadedOrange
		unset BFPaleMagenta
		unset BFDeepMagenta
		unset BFBrightPink
		unset BFTeaGreen
		unset BFAzure
		unset BFBlack
		unset BFGrey
		unset BFDarkPurple
		unset BFStrongPink
		unset BFSunflowerYellow
		unset BFWaterBlue
		unset BFRed
		unset BFTangerine
		unset BFSunnyYellow
		unset BFKelleyGreen
		unset BFElectricBlue
		unset BFPurple
		unset BFMediumGreen
		unset BFOliveGreen
		unset BFSilver
		unset BFDirtyOrange
		unset BFSunYellow
		unset BFCoolBlue
		unset BFDarkSlateBlue
		unset BFLightSilver
		unset BFPistachio
		unset BFCarnationPink
		unset BFHeliotrope
		unset BFWarmBlue
	fi
}

flags_rgb

# Trans Flag
export cbow_trans=("FSky" "FPink" "FWhite" "FPink" "FSky")
export cbow_trans_bg=("BFSky" "BFPink" "BFWhite" "BFPink" "BFSky")

# Enby Flag
export cbow_enby=("FCanaryYellow" "FWhite" "FLightPurple" "FDarkGrey")
export cbow_enby_bg=("BFCanaryYellow" "BFWhite" "BFLightPurple" "BFDarkGrey")

# Bisexual Flag
export cbow_bisexual=("FDeepPink" "FDeepPink" "FLightEggPlant" "FSapphire" "FSapphire")
export cbow_bisexual_bg=("BFDeepPink" "BFDeepPink" "BFLightEggPlant" "BFSapphire" "BFSapphire")

# Lesbian Flag
export cbow_lesbian=("FRedOrange" "FFadedOrange" "FWhite" "FPaleMagenta" "FDeepMagenta")
export cbow_lesbian_bg=("BFRedOrange" "BFFadedOrange" "BFWhite" "BFPaleMagenta" "BFDeepMagenta")

# Polysexual Flag
export cbow_polysexual=("FBrightPink" "FTeaGreen" "FAzure")
export cbow_polysexual_bg=("BFBrightPink" "BFTeaGreen" "BFAzure")

# Asexual Flag
export cbow_asexual=("FBlack" "FGrey" "FWhite" "FDarkPurple")
export cbow_asexual_bg=("BFBlack" "BFGrey" "BFWhite" "BFDarkPurple")

# Pansexual Flag
export cbow_pansexual=("FStrongPink" "FSunflowerYellow" "FWaterBlue")
export cbow_pansexual_bg=("BFStrongPink" "BFSunflowerYellow" "BFWaterBlue")

# Queer Flag
export cbow_queer=("FRed" "FTangerine" "FSunnyYellow" "FKelleyGreen" "FElectricBlue" "FPurple")
export cbow_queer_bg=("BFRed" "BFTangerine" "BFSunnyYellow" "BFKelleyGreen" "BFElectricBlue" "BFPurple")

# Aromantic Flag
export cbow_aromantic=("FMediumGreen" "FOliveGreen" "FWhite" "FSilver" "FBlack")
export cbow_aromantic_bg=("BFMediumGreen" "BFOliveGreen" "BFWhite" "BFSilver" "BFBlack")

# Aroace Flag
export cbow_aroace=("FDirtyOrange" "FSunYellow" "FWhite" "FCoolBlue" "FDarkSlateBlue")
export cbow_aroace_bg=("BFDirtyOrange" "BFSunYellow" "BFWhite" "BFCoolBlue" "BFDarkSlateBlue")

# Agender Flag
export cbow_agender=("FBlack" "FLightSilver" "FPistachio" "FLightSilver" "FBlack")
export cbow_agender_bg=("BFBlack" "BFLightSilver" "BFPistachio" "BFLightSilver" "BFBlack")

# Genderfluid Flag
export cbow_genderfluid=("FCarnationPink" "FWhite" "FHeliotrope" "FBlack" "FWarmBlue")
export cbow_genderfluid_bg=("BFCarnationPink" "BFWhite" "BFHeliotrope" "BFBlack" "BFWarmBlue")

# Rainbow Flag
export cbow_rainbow=("FRed" "FTangerine" "FSunnyYellow" "FKelleyGreen" "FElectricBlue" "FPurple")
export cbow_rainbow_bg=("BFRed" "BFTangerine" "BFSunnyYellow" "BFKelleyGreen" "BFElectricBlue" "BFPurple")

# White Flag
export cbow_white=("FWhite")
export cbow_white_bg=("BFWhite")

# Cyan Flag
export cbow_cyan=("FSky")
export cbow_cyan_bg=("BFSky")

# Green Flag
export cbow_green=("FPistachio")
export cbow_green_bg=("BFPistachio")

# Red Flag
export cbow_red=("FRed")
export cbow_red_bg=("BFRed")

# Yellow Flag
export cbow_yellow=("FSunnyYellow")
export cbow_yellow_bg=("BFSunnyYellow")

# Black Flag
export cbow_black=("FBlack")
export cbow_black_bg=("BFBlack")

function find_cbow_scheme() {
	result="-1"
	count=0
	for element in "${color_schemes[@]}"; do
		if [ "${element}" == "$1" ]; then
			result="$count"
			break
		fi
		let "count = count + 1"
	done
	echo "$result"
}

export find_flag=$(find_cbow_scheme "${FLAG}")
if [ "$find_flag" == "-1" ]; then
	echo "Unknown color scheme \`${FLAG}\`!"
	echo "List available color schemes under \`colors\` command."
	clean_up
	exit 404
fi

export find_flag_bg=$(find_cbow_scheme "${FLAG_BGNAME}")
if [ "$find_flag_bg" == "-1" ]; then
	echo "Unknown background color scheme \`${FLAG_BGNAME}\`!"
	echo "List available color schemes under \`colors\` command."
	clean_up
	exit 404
fi

export cbow=0
cbow_array="cbow_${FLAG}"
eval "cbow_array=(\"\${$cbow_array[@]}\")"
export cbow_array

if [ "${FLAG_BG}" == "1" ]; then
	export cbow_bg=0
	cbow_array_bg="cbow_${FLAG_BGNAME}_bg"
	eval "cbow_array_bg=(\"\${$cbow_array_bg[@]}\")"
	export cbow_array_bg
	export cbow_size_bg=${#cbow_array_bg[@]}
fi

export cbow_size=${#cbow_array[@]}

function color_bow() {
	let "cbow = cbow + 1"
	if [ $cbow == $1 ]; then
		cbow=0
		export cbow
	fi
	export cbow
	if [ "${FLAG_BG}" == "1" ]; then
		let "cbow_bg = cbow_bg + 1"
		if [ $cbow_bg == $cbow_size_bg ]; then
			cbow_bg=0
			export cbow_bg
		fi
		export cbow_bg
	fi
}

function rainbow() {
	if [ $COLOR == 0 ]; then
		echo "$1"
	else
		if [ $RAINBOW == 0 ]; then
			echo "${BCyan}$1"
		else
			input_text="$1"
			output_text=""
			# Loop over each character in the string
			for (( i=0; i<${#input_text}; i++ )); do
				# Access each character using parameter expansion
				current_char="${input_text:i:1}"
				if [ "$FLAG_VERTICAL" == "1" ]; then
					color_bow $cbow_size
				fi
				if [ "$FLAG_BG" == "1" ]; then
					output_text="${output_text}${!cbow_array_bg[$cbow_bg]}${!cbow_array[$cbow]}${current_char}"
				else
					output_text="${output_text}${!cbow_array[$cbow]}${current_char}"
				fi
			done
			output_text="${output_text}${NC}"
			echo "$output_text"
		fi
	fi
}

echo "${BCyan}> ${BGreen}Session ID${BWhite}: ${BRed}${time_boot}"
echo "${BCyan}> ${BGreen}Config${BWhite}: ${NC}"
echo "${BCyan}>> interface - ${BGreen}${INTERFACE}"
echo "${BCyan}>> hostname~ - ${BGreen}${ARGS}"
echo "${BCyan}>> Check root - ${BGreen}${ROOT}"
echo "${BCyan}>> Colored - ${BGreen}${COLOR}"
echo "${BCyan}>> Type - ${BGreen}${SCRIPT_TYPE}"
echo "${BCyan}> ${BYellow}Please wait${BWhite}, $(rainbow 'loading interface(s)...')${BRed}"

catch_dump=5
worker_type="${BRed}"'[Outgoing]'
worker_type_plain='[Outgoing]'
type_dump="src"
case "${SCRIPT_TYPE}" in
	"out")
		catch_dump=5
		worker_type="${BRed}"'[Outgoing]'
		worker_type_plain='[Outgoing]'
		type_dump="src"
		;;
	"in")
		catch_dump=3
		worker_type="${BGreen}"'[Incoming]'
		worker_type_plain='[Incoming]'
		type_dump="dst"
		;;
	*)
		echo "${BCyan}> ${BRed}Unknown process type!"
		clean_up
		exit 404
		;;
esac

tcpdump -i ${INTERFACE} -n ${type_dump} ${ARGS} | cut -d " " -f ${catch_dump} | cut -d ":" -f 1 > "$pipe" &

export tcpdump_pid=$!

export TCP_LINKS=()
export TCP_AMOUNT=()

function find_array() {
	index=-1
	target="$1"
	count=0
	for element in "${TCP_LINKS[@]}"; do
		if [[ "$element" == "$target" ]]; then
			index=$count
			break
		fi
		let "count = count + 1"
	done
	echo "$index"
}

# Get terminal width (number of columns)
export tttx=$(tput cols)
export tab_x=0
let "tab_x = tttx / 5"
export tab_x=$(($(printf "%.0f" $tab_x)))

# Get terminal height (number of lines)
export ttty=$(tput lines)

function spacing() {
	output=""
	for (( i=1; i<=$1; i++ )); do
		output="${output} "
	done
	echo "$output"
}

center=0
let "center = tttx / 2"
center=$(($(printf "%.0f" $center)))
export center
ip_label="ID:${time_boot}"' IP List '"${worker_type_plain}"
ip_label_size=${#ip_label}
ip_label_size_half=0
let "ip_label_size_half = ip_label_size / 2"
ip_label_size_half=$(($(printf "%.0f" $ip_label_size_half)))

align_center_text=0
let "align_center_text = center - ip_label_size_half - 1"
unset ip_label_size
unset ip_label_size_half
export ip_label="${On_Blue}"$(spacing $align_center_text)"${BGreen}ID${BWhite}:${BRed}${time_boot}${NC} ${BCyan}IP List${NC} ${On_Blue}${worker_type}${NC}${On_Blue}$(spacing $align_center_text)${NC}"
unset align_center_text

export end_label=" ${BPurple}By Chimmie Firefly ${BWhite}|${BRed} OwO ${BWhite}|${BCyan} Config${BWhite}: ${Green}${INTERFACE} ${BWhite}-${Green} ${ARGS} ${BWhite}-${Green} Root-${ROOT}${BGreen}"

function window_resize() {
	# Get terminal width (number of columns)
	export tttx=$(tput cols)
	export tab_x=0
	let "tab_x = tttx / 5"
	export tab_x=$(($(printf "%.0f" $tab_x)))

	# Get terminal height (number of lines)
	export ttty=$(tput lines)

	center=0
	let "center = tttx / 2"
	center=$(($(printf "%.0f" $center)))
	export center
	ip_label="ID:${time_boot}"' IP List '"${worker_type_plain}"
	ip_label_size=${#ip_label}
	ip_label_size_half=0
	let "ip_label_size_half = ip_label_size / 2"
	ip_label_size_half=$(($(printf "%.0f" $ip_label_size_half)))

	align_center_text=0
	let "align_center_text = center - ip_label_size_half - 1"
	unset ip_label_size
	unset ip_label_size_half
	export ip_label="${On_Blue}"$(spacing $align_center_text)"${BGreen}ID${BWhite}:${BRed}${time_boot}${NC} ${BCyan}IP List${NC} ${On_Blue}${worker_type}${NC}${On_Blue}$(spacing $align_center_text)${NC}"
	unset align_center_text

}

trap "window_resize" WINCH

function render_interface() {
	echo "$ip_label"
	echo ""
	count=0
	total_x=10
	for element in "${TCP_LINKS[@]}"; do
		string=" ${element}: ${TCP_AMOUNT[$count]}"
		string_size=${#string}
		tabbing=0
		let "tabbing = tab_x - string_size"
		string="$(spacing $tabbing) ${element}: ${TCP_AMOUNT[$count]}"
		string_size=${#string}
		if [ "$FLAG_BG" == "1" ]; then
			string="${!cbow_array_bg[$cbow_bg]}$(spacing $tabbing) $(rainbow ${element})${!cbow_array_bg[$cbow_bg]}${BWhite}: ${BRed}${TCP_AMOUNT[$count]}"
		else
			string="$(spacing $tabbing) $(rainbow ${element})${BWhite}: ${BRed}${TCP_AMOUNT[$count]}"
		fi
		let "total_x = total_x + string_size"
		echo -n "$string"
		if [ $total_x -gt $tttx ]; then
			echo ""
			total_x=10
			if [ "$FLAG_VERTICAL" == "0" ]; then
				color_bow $cbow_size
			fi
		fi
		let "count = count + 1"
	done
	echo "${NC}"
	echo ""
	echo ""
	echo "$end_label"
}

while IFS= read -r line; do
	result=$(find_array "$line")
	if [ $(echo "$result") == "-1" ]; then
		TCP_LINKS+=("$line")
		TCP_AMOUNT+=(1)
		export TCP_LINKS
		export TCP_AMOUNT
	else
		amount=${TCP_AMOUNT[$(($result))]}
		let "amount = amount + 1"
		TCP_AMOUNT[$(($result))]=$amount
		export TCP_AMOUNT
	fi
	renderer=$(render_interface)
	clear
	echo "$renderer"
done < "$pipe"
