#!/bin/sh

if ! [ "$(whoami)" == "root" ]; then
	echo "Command must be executed by root!"
	exit 1
fi

INTERFACE=${PROBE_INTERFACE:-"eth3"}
ARGS=${PROBE_SRC:-"xaviama.dank-me.me"}
COLOR=${PROBE_COLOR:-1}

pipe=/tmp/tcpdump_output
mkfifo "$pipe"

clear

function shutdown() {
	kill -9 "$tcpdump_pid"
	rm -f "$pipe"
	echo "${BCyan}> ${BRed}Shutting down!${NC}"
	exit 0
}

trap "shutdown" SIGTERM SIGINT ERR

tcpdump -i ${INTERFACE} -n src ${ARGS} | cut -d " " -f 5 | cut -d ":" -f 1 > "$pipe" &

export tcpdump_pid=$!

export TCP_LINKS=()
export TCP_AMOUNT=()

function load_colors() {
    if [ $COLOR == 1 ]; then
        LS_COLORS='no=00;38;5;244:rs=0:di=00;38;5;33:ln=00;38;5;37:mh=00:pi=48;5;230;38;5;136;01:so=48;5;230;38;5;136;01:do=48;5;230;38;5;136;01:bd=48;5;230;38;5;244;01:cd=48;5;230;38;5;244;01:or=48;5;235;38;5;160:su=48;5;160;38;5;230:sg=48;5;136;38;5;230:ca=30;41:tw=48;5;64;38;5;230:ow=48;5;235;38;5;33:st=48;5;33;38;5;230:ex=00;38;5;64:*.tar=00;38;5;61:*.tgz=00;38;5;61:*.arj=00;38;5;61:*.taz=00;38;5;61:*.lzh=00;38;5;61:*.lzma=00;38;5;61:*.tlz=00;38;5;61:*.txz=00;38;5;61:*.zip=00;38;5;61:*.z=00;38;5;61:*.Z=00;38;5;61:*.dz=00;38;5;61:*.gz=00;38;5;61:*.lz=00;38;5;61:*.xz=00;38;5;61:*.bz2=00;38;5;61:*.bz=00;38;5;61:*.tbz=00;38;5;61:*.tbz2=00;38;5;61:*.tz=00;38;5;61:*.deb=00;38;5;61:*.rpm=00;38;5;61:*.jar=00;38;5;61:*.rar=00;38;5;61:*.ace=00;38;5;61:*.zoo=00;38;5;61:*.cpio=00;38;5;61:*.7z=00;38;5;61:*.rz=00;38;5;61:*.apk=00;38;5;61:*.gem=00;38;5;61:*.jpg=00;38;5;136:*.JPG=00;38;5;136:*.jpeg=00;38;5;136:*.gif=00;38;5;136:*.bmp=00;38;5;136:*.pbm=00;38;5;136:*.pgm=00;38;5;136:*.ppm=00;38;5;136:*.tga=00;38;5;136:*.xbm=00;38;5;136:*.xpm=00;38;5;136:*.tif=00;38;5;136:*.tiff=00;38;5;136:*.png=00;38;5;136:*.PNG=00;38;5;136:*.svg=00;38;5;136:*.svgz=00;38;5;136:*.mng=00;38;5;136:*.pcx=00;38;5;136:*.dl=00;38;5;136:*.xcf=00;38;5;136:*.xwd=00;38;5;136:*.yuv=00;38;5;136:*.cgm=00;38;5;136:*.emf=00;38;5;136:*.eps=00;38;5;136:*.CR2=00;38;5;136:*.ico=00;38;5;136:*.tex=00;38;5;245:*.rdf=00;38;5;245:*.owl=00;38;5;245:*.n3=00;38;5;245:*.ttl=00;38;5;245:*.nt=00;38;5;245:*.torrent=00;38;5;245:*.xml=00;38;5;245:*Makefile=00;38;5;245:*Rakefile=00;38;5;245:*Dockerfile=00;38;5;245:*build.xml=00;38;5;245:*rc=00;38;5;245:*1=00;38;5;245:*.nfo=00;38;5;245:*README=00;38;5;245:*README.txt=00;38;5;245:*readme.txt=00;38;5;245:*.md=00;38;5;245:*README.markdown=00;38;5;245:*.ini=00;38;5;245:*.yml=00;38;5;245:*.cfg=00;38;5;245:*.conf=00;38;5;245:*.h=00;38;5;245:*.hpp=00;38;5;245:*.c=00;38;5;245:*.cpp=00;38;5;245:*.cxx=00;38;5;245:*.cc=00;38;5;245:*.objc=00;38;5;245:*.sqlite=00;38;5;245:*.go=00;38;5;245:*.sql=00;38;5;245:*.csv=00;38;5;245:*.log=00;38;5;240:*.bak=00;38;5;240:*.aux=00;38;5;240:*.lof=00;38;5;240:*.lol=00;38;5;240:*.lot=00;38;5;240:*.out=00;38;5;240:*.toc=00;38;5;240:*.bbl=00;38;5;240:*.blg=00;38;5;240:*~=00;38;5;240:*#=00;38;5;240:*.part=00;38;5;240:*.incomplete=00;38;5;240:*.swp=00;38;5;240:*.tmp=00;38;5;240:*.temp=00;38;5;240:*.o=00;38;5;240:*.pyc=00;38;5;240:*.class=00;38;5;240:*.cache=00;38;5;240:*.aac=00;38;5;166:*.au=00;38;5;166:*.flac=00;38;5;166:*.mid=00;38;5;166:*.midi=00;38;5;166:*.mka=00;38;5;166:*.mp3=00;38;5;166:*.mpc=00;38;5;166:*.ogg=00;38;5;166:*.opus=00;38;5;166:*.ra=00;38;5;166:*.wav=00;38;5;166:*.m4a=00;38;5;166:*.axa=00;38;5;166:*.oga=00;38;5;166:*.spx=00;38;5;166:*.xspf=00;38;5;166:*.mov=00;38;5;166:*.MOV=00;38;5;166:*.mpg=00;38;5;166:*.mpeg=00;38;5;166:*.m2v=00;38;5;166:*.mkv=00;38;5;166:*.ogm=00;38;5;166:*.mp4=00;38;5;166:*.m4v=00;38;5;166:*.mp4v=00;38;5;166:*.vob=00;38;5;166:*.qt=00;38;5;166:*.nuv=00;38;5;166:*.wmv=00;38;5;166:*.asf=00;38;5;166:*.rm=00;38;5;166:*.rmvb=00;38;5;166:*.flc=00;38;5;166:*.avi=00;38;5;166:*.fli=00;38;5;166:*.flv=00;38;5;166:*.gl=00;38;5;166:*.m2ts=00;38;5;166:*.divx=00;38;5;166:*.webm=00;38;5;166:*.axv=00;38;5;166:*.anx=00;38;5;166:*.ogv=00;38;5;166:*.ogx=00;38;5;166:'
        export LS_COLORS

        # Normal Colors
        export Black=$'\e[0;30m'        # Black
        export Red=$'\e[0;31m'          # Red
        export Green=$'\e[0;32m'        # Green
        export Yellow=$'\e[0;33m'       # Yellow
        export Blue=$'\e[0;34m'         # Blue
        export Purple=$'\e[0;35m'       # Purple
        export Cyan=$'\e[0;36m'         # Cyan
        export White=$'\e[0;37m'        # White

        # Bold
        export BBlack=$'\e[1;30m'       # Black
        export BRed=$'\e[1;31m'         # Red
        export BGreen=$'\e[1;32m'       # Green
        export BYellow=$'\e[1;33m'      # Yellow
        export BBlue=$'\e[1;34m'        # Blue
        export BPurple=$'\e[1;35m'      # Purple
        export BCyan=$'\e[1;36m'        # Cyan
        export BWhite=$'\e[1;37m'       # White

        # Background
        export On_Black=$'\e[40m'       # Black
        export On_Red=$'\e[41m'         # Red
        export On_Green=$'\e[42m'       # Green
        export On_Yellow=$'\e[43m'      # Yellow
        export On_Blue=$'\e[44m'        # Blue
        export On_Purple=$'\e[45m'      # Purple
        export On_Cyan=$'\e[46m'        # Cyan
        export On_White=$'\e[47m'       # White

        export NC=$'\e[m'               # Color Reset
    else
        unset LS_COLORS

        # Normal Colors
        unset Black        # Black
        unset Red          # Red
        unset Green        # Green
        unset Yellow       # Yellow
        unset Blue         # Blue
        unset Purple       # Purple
        unset Cyan         # Cyan
        unset White        # White

        # Bold
        unset BBlack       # Black
        unset BRed         # Red
        unset BGreen       # Green
        unset BYellow      # Yellow
        unset BBlue        # Blue
        unset BPurple      # Purple
        unset BCyan        # Cyan
        unset BWhite       # White

        # Background
        unset On_Black       # Black
        unset On_Red         # Red
        unset On_Green       # Green
        unset On_Yellow      # Yellow
        unset On_Blue        # Blue
        unset On_Purple      # Purple
        unset On_Cyan        # Cyan
        unset On_White       # White

        unset NC               # Color Reset
    fi

}

load_colors

export cbow=0
export cbow_array=("BGreen" "Green" "BYellow" "Yellow" "BRed" "Red" "BPurple" "Purple" "BCyan" "Cyan" "BBlue")
export cbow_size=${#cbow_array[@]}

function color_bow() {
	if [ $cbow == $cbow_size ]; then
		cbow=0
		export cbow
	fi
	let "cbow = cbow + 1"
	export cbow
}

function rainbow() {
	if [ $COLOR == 0 ]; then
		echo "$1"
	else
		input_text="$1"
		output_text=""
		# Loop over each character in the string
		for (( i=0; i<${#input_text}; i++ )); do
			# Access each character using parameter expansion
			current_char="${input_text:i:1}"
			color_bow
			output_text="${output_text}${!cbow_array[$cbow]}${current_char}"
		done
		output_text="${output_text}${NC}"
		echo "$output_text"
	fi
}


echo "${BCyan}> ${BYellow}Please wait${BWhite}, $(rainbow 'loading interface(s)...')"

function find_array() {
	index=-1
	target="$1"
	count=0
	for element in "${TCP_LINKS[@]}"; do
		if [[ "$element" == "$target" ]]; then
			index=$count
			break
		fi
		let "count = count + 1"
	done
	echo "$index"
}

# Get terminal width (number of columns)
export tttx=$(tput cols)
export tab_x=0
let "tab_x = tttx / 5"
export tab_x=$(($(printf "%.0f" $tab_x)))

# Get terminal height (number of lines)
export ttty=$(tput lines)

function spacing() {
	output=""
	for (( i=1; i<=$1; i++ )); do
		output="${output} "
	done
	echo "$output"
}

center=0
let "center = tttx / 2"
center=$(($(printf "%.0f" $center)))
export center
ip_label='IP List [Outgoing]'
ip_label_size=${#ip_label}
ip_label_size_half=0
let "ip_label_size_half = ip_label_size / 2"
ip_label_size_half=$(($(printf "%.0f" $ip_label_size_half)))

align_center_text=0
let "align_center_text = center - ip_label_size_half - 1"
unset ip_label_size
unset ip_label_size_half
export ip_label="${On_Blue}"$(spacing $align_center_text)"${BCyan}IP List${NC} ${On_Blue}${BRed}[Outgoing]${NC}${On_Blue}$(spacing $align_center_text)${NC}"
unset align_center_text

export end_label=" ${BPurple}By Chimmie Firefly, uwu${NC}"

function window_resize() {
	# Get terminal width (number of columns)
	export tttx=$(tput cols)
	export tab_x=0
	let "tab_x = tttx / 5"
	export tab_x=$(($(printf "%.0f" $tab_x)))

	# Get terminal height (number of lines)
	export ttty=$(tput lines)

	center=0
	let "center = tttx / 2"
	center=$(($(printf "%.0f" $center)))
	export center
	ip_label='IP List [Outgoing]'
	ip_label_size=${#ip_label}
	ip_label_size_half=0
	let "ip_label_size_half = ip_label_size / 2"
	ip_label_size_half=$(($(printf "%.0f" $ip_label_size_half)))

	align_center_text=0
	let "align_center_text = center - ip_label_size_half - 1"
	unset ip_label_size
	unset ip_label_size_half
	export ip_label="${On_Blue}"$(spacing $align_center_text)"${BCyan}IP List${NC} ${On_Blue}${BRed}[Outgoing]${NC}${On_Blue}$(spacing $align_center_text)${NC}"
	unset align_center_text

}

trap "window_resize" WINCH

function render_interface() {
	echo "$ip_label"
	echo ""
	count=0
	total_x=10
	for element in "${TCP_LINKS[@]}"; do
		string=" ${element}: ${TCP_AMOUNT[$count]}"
		string_size=${#string}
		tabbing=0
		let "tabbing = tab_x - string_size"
		string="$(spacing $tabbing) ${element}: ${TCP_AMOUNT[$count]}"
		string_size=${#string}
		string="$(spacing $tabbing) $(rainbow ${element})${BWhite}: ${BRed}${TCP_AMOUNT[$count]}"
		let "total_x = total_x + string_size"
		if [ $total_x -gt $tttx ]; then
			echo ""
			total_x=10
		fi
		echo -n "$string"
		let "count = count + 1"
	done
	echo ""
	echo ""
	echo ""
	echo "$end_label"
}

while IFS= read -r line; do
	result=$(find_array "$line")
	if [ $(echo "$result") == "-1" ]; then
		TCP_LINKS+=("$line")
		TCP_AMOUNT+=(1)
		export TCP_LINKS
		export TCP_AMOUNT
	else
		amount=${TCP_AMOUNT[$(($result))]}
		let "amount = amount + 1"
		TCP_AMOUNT[$(($result))]=$amount
		export TCP_AMOUNT
	fi
	renderer=$(render_interface)
	clear
	echo "$renderer"
done < "$pipe"
